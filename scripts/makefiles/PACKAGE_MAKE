# Makefile for building a single package.  Must be called with PACKAGE
# defined.

include $(ROOTFS_TOP)/scripts/makefiles/COMMON
include $(makefiles)/TARGET_COMMON
include $(makefiles)/PACKAGE_COMMON

# This should be called as part of a package build recipe for a library
# component to install the pkg-config file for the library.
install-pkg-config = \
    $(call EXPORT,PKG_CONFIG_PATH I packagedir) \
        $(scripts)/install-pkg-config $(PACKAGE) $($(PACKAGE)_VERSION)

# Sets name to $name_$version if define or uses the default value.  Call thus:
#
#   $(call SET_VERSION,name,default)
#
define _SET_VERSION
    ifdef $1_$(version)
        $1 := $($1_$(version))
    else ifdef $1
        # $1 is set and there is no override
    else
        $1 := $2
    endif
endef
SET_VERSION = $(eval $(_SET_VERSION))

version = $($(PACKAGE)_VERSION)


# Where the sources are placed and where the package will be built.
srcdir = $(SOURCE_ROOT)/$(SOURCE_DIR_NAME)

# Build type needed for --build argument to many ./configure scripts
BUILD_TYPE = $(shell $(scripts)/config.guess)


PYTHON_INSTALL_OPTS = \
    --prefix=/usr \
    --root=$(I)

PYTHON_BUILD_TYPE ?= distutils
ifeq ($(PYTHON_BUILD_TYPE),distutils)
else
ifeq ($(PYTHON_BUILD_TYPE),setuptools)
PYTHON_INSTALL_OPTS += --single-version-externally-managed
else
$(error Unknown PYTHON_BUILD_TYPE $(PYTHON_BUILD_TYPE))
endif
endif

# Special definitions for Python building.  Note that the prefix and sysroot
# values must agree with what is set in the installed Python.pc file.
_SYSCONFIG_PATH = \
    $(PYTHON_PREFIX)/lib/python$(PYTHON_VER)/_sysconfigdata__linux_*.py
PYTHON_PREFIX = $(call pkg-config,Python$(SYSTEM_PYTHON) --variable=prefix)
PYTHON_SYSCONFIGDATA_NAME = \
    $(shell basename -s .py $(wildcard $(_SYSCONFIG_PATH)))
PYTHON_BUILD_OPTS =
PYTHON_SETUP_ENV = \
    CC=$(CROSS_COMPILE)gcc \
    LD=$(CROSS_COMPILE)ld \
    LDSHARED='$(CROSS_COMPILE)gcc -shared' \
    PYTHONPATH='$(PYTHON_PREFIX)/lib/python$(PYTHON_VER)' \
    _PYTHON_SYSCONFIGDATA_NAME='$(PYTHON_SYSCONFIGDATA_NAME)' \
    _python_sysroot=$(PYTHON_PREFIX)/.. \
    _python_prefix=/usr \
    _python_exec_prefix=/usr
python-build = \
    cd $(srcdir)  &&  \
    $(PYTHON_SETUP_ENV) python$(SYSTEM_PYTHON) setup.py \
        build -b $O $(PYTHON_BUILD_OPTS) \
        install $(PYTHON_INSTALL_OPTS)

# Finally we can pull in the real package definitions and fire the
# appropriate rules.
include $(packagedir)/CONFIG


# All the following can be overridden in the CONFIG file we've just loaded, so
# now determine their values.

# Definitions specific to source extraction.  These can all be set in the
# package CONFIG file, either in general or for a specific package version.

# Source directory and package specification.  A little involved, as we want
# the extracted sources to be as uniform as possible, but individual source
# packages introduce their own variations.
$(call SET_VERSION,TAR_EXTENSION,.tar.bz2)
$(call SET_VERSION,SEPARATOR,-)
$(call SET_VERSION,TAR_SEPARATOR,$(SEPARATOR))
$(call SET_VERSION,SOURCE_SEPARATOR,$(SEPARATOR))
$(call SET_VERSION,TAR_FILE,\
    $(PACKAGE)$(TAR_SEPARATOR)$(version)$(TAR_EXTENSION))
$(call SET_VERSION,SOURCE_DIR_NAME,$(PACKAGE)$(SOURCE_SEPARATOR)$(version))
$(call SET_VERSION,untar-extra,@:)
$(call SET_VERSION,patch-extra,@:)

# Configuration of source file
$(call SET_VERSION,MD5_SUM)
$(call SET_VERSION,PATCHES)


# Allow package specific overrides of CFLAGS.
ifdef CFLAGS_$(PACKAGE)
CFLAGS = $(CFLAGS_$(PACKAGE))
endif

# Use LIB_DEPENDS to locate libraries if necessary.
ifdef LIB_DEPENDS
export LDFLAGS  += $(call pkg-config,$(LIB_DEPENDS) --libs)
export CPPFLAGS += $(call pkg-config,$(LIB_DEPENDS) --cflags)
endif

include $(makefiles)/PACKAGE_RULES

# vim: set filetype=make:
